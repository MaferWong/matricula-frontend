{"ast":null,"code":"import * as React from 'react';\nimport { renderThemeProvider as render } from './renderThemeProvider';\nimport { makeMergeProps } from '@fluentui/react-compose/lib/next/index';\nimport { useThemeProviderState } from './useThemeProviderState';\nimport { useMergedRefs } from '@uifabric/react-hooks';\nvar mergeProps = makeMergeProps();\n/**\r\n * Returns the ThemeProvider render function and calculated state, given user input, ref, and\r\n * a set of default prop values.\r\n */\n\nexport var useThemeProvider = function (props, ref, defaultProps) {\n  var rootRef = useMergedRefs(ref, React.useRef(null));\n  var state = mergeProps({\n    ref: rootRef,\n    as: 'div'\n  }, defaultProps, props); // Apply changes to state.\n\n  useThemeProviderState(state);\n  return {\n    state: state,\n    render: render\n  };\n};","map":{"version":3,"sources":["useThemeProvider.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,mBAAmB,IAAI,MAAhC,QAA8C,uBAA9C;AACA,SAAS,cAAT,QAA+B,wCAA/B;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,aAAT,QAA8B,uBAA9B;AAEA,IAAM,UAAU,GAAG,cAAc,EAAjC;AAEA;;;AAGG;;AACH,OAAO,IAAM,gBAAgB,GAAG,UAC9B,KAD8B,EAE9B,GAF8B,EAG9B,YAH8B,EAGE;AAEhC,MAAM,OAAO,GAAG,aAAa,CAAC,GAAD,EAAM,KAAK,CAAC,MAAN,CAA0B,IAA1B,CAAN,CAA7B;AACA,MAAM,KAAK,GAAG,UAAU,CACtB;AACE,IAAA,GAAG,EAAE,OADP;AAEE,IAAA,EAAE,EAAE;AAFN,GADsB,EAKtB,YALsB,EAMtB,KANsB,CAAxB,CAHgC,CAWhC;;AACA,EAAA,qBAAqB,CAAC,KAAD,CAArB;AAEA,SAAO;AACL,IAAA,KAAK,EAAA,KADA;AAEL,IAAA,MAAM,EAAA;AAFD,GAAP;AAID,CArBM","sourcesContent":["import { ThemeProviderProps, ThemeProviderState } from './ThemeProvider.types';\nimport * as React from 'react';\nimport { renderThemeProvider as render } from './renderThemeProvider';\nimport { makeMergeProps } from '@fluentui/react-compose/lib/next/index';\nimport { useThemeProviderState } from './useThemeProviderState';\nimport { useMergedRefs } from '@uifabric/react-hooks';\n\nconst mergeProps = makeMergeProps<ThemeProviderState>();\n\n/**\n * Returns the ThemeProvider render function and calculated state, given user input, ref, and\n * a set of default prop values.\n */\nexport const useThemeProvider = (\n  props: ThemeProviderProps,\n  ref: React.Ref<HTMLElement>,\n  defaultProps: ThemeProviderProps,\n) => {\n  const rootRef = useMergedRefs(ref, React.useRef<HTMLElement>(null));\n  const state = mergeProps(\n    {\n      ref: rootRef,\n      as: 'div',\n    },\n    defaultProps,\n    props,\n  );\n  // Apply changes to state.\n  useThemeProviderState(state);\n\n  return {\n    state,\n    render,\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}