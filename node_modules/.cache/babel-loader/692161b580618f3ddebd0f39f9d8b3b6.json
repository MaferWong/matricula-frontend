{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\n/**\r\n * Ensures that the given slots are represented using object syntax. This ensures that\r\n * the object can be merged along with other objects.\r\n * @param props - The incoming props\r\n * @param shorthandPropNames - An array of prop names to apply simplification to\r\n */\n\nexport var resolveShorthandProps = function (props, shorthandPropNames) {\n  var newProps = props;\n\n  if (shorthandPropNames && shorthandPropNames.length) {\n    newProps = __assign({}, props);\n\n    for (var _i = 0, shorthandPropNames_1 = shorthandPropNames; _i < shorthandPropNames_1.length; _i++) {\n      var propName = shorthandPropNames_1[_i];\n      var propValue = props[propName];\n\n      if (propValue !== undefined && (typeof propValue !== 'object' || React.isValidElement(propValue))) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        newProps[propName] = {\n          children: propValue\n        };\n      }\n    }\n  }\n\n  return newProps;\n};","map":{"version":3,"sources":["next/resolveShorthandProps.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA;;;;;AAKG;;AACH,OAAO,IAAM,qBAAqB,GAAG,UAAU,KAAV,EAAyB,kBAAzB,EAA6D;AAChG,MAAI,QAAQ,GAAG,KAAf;;AAEA,MAAI,kBAAkB,IAAI,kBAAkB,CAAC,MAA7C,EAAqD;AACnD,IAAA,QAAQ,GAAA,QAAA,CAAA,EAAA,EACH,KADG,CAAR;;AAGA,SAAuB,IAAA,EAAA,GAAA,CAAA,EAAA,oBAAA,GAAA,kBAAvB,EAAuB,EAAA,GAAA,oBAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAA2C;AAAtC,UAAM,QAAQ,GAAA,oBAAA,CAAA,EAAA,CAAd;AACH,UAAM,SAAS,GAAG,KAAK,CAAC,QAAD,CAAvB;;AAEA,UAAI,SAAS,KAAK,SAAd,KAA4B,OAAO,SAAP,KAAqB,QAArB,IAAiC,KAAK,CAAC,cAAN,CAAqB,SAArB,CAA7D,CAAJ,EAAmG;AACjG;AACC,QAAA,QAAgB,CAAC,QAAD,CAAhB,GAA6B;AAAE,UAAA,QAAQ,EAAE;AAAZ,SAA7B;AACF;AACF;AACF;;AAED,SAAO,QAAP;AACD,CAlBM","sourcesContent":["import * as React from 'react';\n\n/**\n * Ensures that the given slots are represented using object syntax. This ensures that\n * the object can be merged along with other objects.\n * @param props - The incoming props\n * @param shorthandPropNames - An array of prop names to apply simplification to\n */\nexport const resolveShorthandProps = <TProps,>(props: TProps, shorthandPropNames: (keyof TProps)[]) => {\n  let newProps = props;\n\n  if (shorthandPropNames && shorthandPropNames.length) {\n    newProps = {\n      ...props,\n    };\n    for (const propName of shorthandPropNames) {\n      const propValue = props[propName];\n\n      if (propValue !== undefined && (typeof propValue !== 'object' || React.isValidElement(propValue))) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (newProps as any)[propName] = { children: propValue };\n      }\n    }\n  }\n\n  return newProps as TProps;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}