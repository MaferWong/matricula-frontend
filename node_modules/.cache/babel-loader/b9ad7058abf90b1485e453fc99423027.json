{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { StylesheetContext } from './StylesheetContext';\n/**\r\n * Provider for registering stylesheets in a given target document.\r\n * The `register` method can be called many times and will only register once\r\n * per unique target document.\r\n */\n\nexport var StylesheetProvider = function (props) {\n  var context = React.useContext(StylesheetContext);\n  var mergedContext = React.useMemo(function () {\n    return __assign(__assign({}, context), props);\n  }, // Only recompute the context to pass down if the parent passes a new one. Props should not\n  // be mutating dynamically for a provider, or may be doing so accidentally. Avoid recomputations.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [context]);\n  return React.createElement(StylesheetContext.Provider, {\n    value: mergedContext\n  }, props.children);\n};\nexport var StylesheetConsumer = StylesheetContext.Consumer;","map":{"version":3,"sources":["StylesheetProvider.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,iBAAT,QAAyD,qBAAzD;AAGA;;;;AAIG;;AACH,OAAO,IAAM,kBAAkB,GAAG,UAAC,KAAD,EAAwD;AACxF,MAAM,OAAO,GAAG,KAAK,CAAC,UAAN,CAAiB,iBAAjB,CAAhB;AACA,MAAM,aAAa,GAAG,KAAK,CAAC,OAAN,CACpB,YAAA;AAAM,WAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAEA,OAFA,CAAA,EAAA,KAAA,CAAA;AAIJ,GALkB,EAMpB;AACA;AACA;AACA,GAAC,OAAD,CAToB,CAAtB;AAYA,SAAO,KAAA,CAAA,aAAA,CAAC,iBAAiB,CAAC,QAAnB,EAA2B;AAAC,IAAA,KAAK,EAAE;AAAR,GAA3B,EAAmD,KAAK,CAAC,QAAzD,CAAP;AACD,CAfM;AAiBP,OAAO,IAAM,kBAAkB,GAAG,iBAAiB,CAAC,QAA7C","sourcesContent":["import * as React from 'react';\nimport { StylesheetContext, StylesheetContextType } from './StylesheetContext';\nimport { StylesheetProviderProps } from './StylesheetProvider.types';\n\n/**\n * Provider for registering stylesheets in a given target document.\n * The `register` method can be called many times and will only register once\n * per unique target document.\n */\nexport const StylesheetProvider = (props: React.PropsWithChildren<StylesheetProviderProps>) => {\n  const context = React.useContext(StylesheetContext);\n  const mergedContext = React.useMemo<StylesheetContextType>(\n    () => ({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ...(context as any),\n      ...props,\n    }),\n    // Only recompute the context to pass down if the parent passes a new one. Props should not\n    // be mutating dynamically for a provider, or may be doing so accidentally. Avoid recomputations.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [context],\n  );\n\n  return <StylesheetContext.Provider value={mergedContext}>{props.children}</StylesheetContext.Provider>;\n};\n\nexport const StylesheetConsumer = StylesheetContext.Consumer;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}