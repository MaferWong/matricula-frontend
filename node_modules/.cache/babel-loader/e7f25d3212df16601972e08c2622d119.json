{"ast":null,"code":"export var tokensToStyleObject = function (tokens, prefix, style) {\n  if (style === void 0) {\n    style = {};\n  }\n\n  var hasCheckedObject = false;\n\n  if (tokens) {\n    for (var _i = 0, _a = Object.keys(tokens); _i < _a.length; _i++) {\n      var name_1 = _a[_i]; // On the first token property, check if this object has already been tokenized.\n\n      if (!hasCheckedObject) {\n        if (name_1.indexOf('--') === 0) {\n          return tokens;\n        }\n\n        hasCheckedObject = true;\n      }\n\n      var varName = prefix ? \"\" + prefix + (name_1 === 'default' ? '' : '-' + name_1) : \"--\" + name_1;\n      var varValue = tokens[name_1];\n\n      if (varValue && typeof varValue === 'object') {\n        tokensToStyleObject(varValue, varName, style);\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        style[varName] = varValue;\n      }\n    }\n  }\n\n  return style;\n};","map":{"version":3,"sources":["tokensToStyleObject.ts"],"names":[],"mappings":"AAGA,OAAO,IAAM,mBAAmB,GAAG,UACjC,MADiC,EAEjC,MAFiC,EAGjC,KAHiC,EAGU;AAA3C,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,EAAA;AAA2C;;AAE3C,MAAI,gBAAgB,GAAG,KAAvB;;AAEA,MAAI,MAAJ,EAAY;AACV,SAAmB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,IAAP,CAAY,MAAZ,CAAnB,EAAmB,EAAA,GAAA,EAAA,CAAA,MAAnB,EAAmB,EAAA,EAAnB,EAAwC;AAAnC,UAAM,MAAI,GAAA,EAAA,CAAA,EAAA,CAAV,CAAmC,CACtC;;AACA,UAAI,CAAC,gBAAL,EAAuB;AACrB,YAAI,MAAI,CAAC,OAAL,CAAa,IAAb,MAAuB,CAA3B,EAA8B;AAC5B,iBAAO,MAAP;AACD;;AAED,QAAA,gBAAgB,GAAG,IAAnB;AACD;;AAED,UAAM,OAAO,GAAG,MAAM,GAAG,KAAG,MAAH,IAAY,MAAI,KAAK,SAAT,GAAqB,EAArB,GAA0B,MAAM,MAA5C,CAAH,GAAwD,OAAK,MAAnF;AACA,UAAM,QAAQ,GAAI,MAAuB,CAAC,MAAD,CAAzC;;AAEA,UAAI,QAAQ,IAAI,OAAO,QAAP,KAAoB,QAApC,EAA8C;AAC5C,QAAA,mBAAmB,CAAC,QAAD,EAA8C,OAA9C,EAAuD,KAAvD,CAAnB;AACD,OAFD,MAEO;AACL;AACC,QAAA,KAAa,CAAC,OAAD,CAAb,GAAyB,QAAzB;AACF;AACF;AACF;;AAED,SAAO,KAAP;AACD,CA/BM","sourcesContent":["import * as React from 'react';\nimport { TokenSetType } from '@fluentui/theme';\n\nexport const tokensToStyleObject = (\n  tokens?: TokenSetType | React.CSSProperties,\n  prefix?: string,\n  style: React.CSSProperties | undefined = {},\n): React.CSSProperties => {\n  let hasCheckedObject = false;\n\n  if (tokens) {\n    for (const name of Object.keys(tokens)) {\n      // On the first token property, check if this object has already been tokenized.\n      if (!hasCheckedObject) {\n        if (name.indexOf('--') === 0) {\n          return tokens as React.CSSProperties;\n        }\n\n        hasCheckedObject = true;\n      }\n\n      const varName = prefix ? `${prefix}${name === 'default' ? '' : '-' + name}` : `--${name}`;\n      const varValue = (tokens as TokenSetType)[name];\n\n      if (varValue && typeof varValue === 'object') {\n        tokensToStyleObject(varValue as { [key: string]: TokenSetType }, varName, style);\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (style as any)[varName] = varValue;\n      }\n    }\n  }\n\n  return style;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}