{"ast":null,"code":"import { applyClasses } from './applyClasses';\nimport { makeStyles } from './makeStyles';\n/**\r\n * The `makeClasses` helper encapsulates `makeStyles`, and given a style map which follows\r\n * a specific naming convention, produces a hook function which takes in the component\r\n * draft state and auto distributes classes into the draft state. This removes a lot of\r\n * boilerplate code using `classnames` helpers to manage distributing classnames manually.\r\n *\r\n * Usage:\r\n *\r\n * ```tsx\r\n * const useButtonClasses makeClasses(theme => {\r\n *   root: { ... },\r\n *   _primary: { ... },\r\n *   _size_small: { ... }\r\n * });\r\n * ```\r\n *\r\n * The class naming convention is broken down as follows:\r\n *\r\n * * No underscores - a slot class name. (E.g. \"root\", \"icon\", etc)\r\n * * Prefixed with underscore - a modifier. (E.g. \"_primary\", \"_fluid\")\r\n * * Contains 2 underscores - a name/value matcher. (E.g. \"_size_small\")\r\n *\r\n * Modifier classnames are added to the root className when the state contains a truthy value\r\n * of the same name. For example, when the primary flag is present, the \"_primary\" modifier\r\n * class will be appended to the root className prop.\r\n *\r\n * Enum classnames are also added to the root className when teh state contains an enum value\r\n * which matches the value in the className. for example, when the `size` enum value is `small`,\r\n * the \"_size_small\" enum class will be appended to the root className prop.\r\n */\n\nexport var makeClasses = function (styleOrFunction) {\n  var useStyles = makeStyles(styleOrFunction);\n  return function (state, options) {\n    var classes = useStyles(options);\n    applyClasses(state, classes);\n  };\n};","map":{"version":3,"sources":["makeClasses.ts"],"names":[],"mappings":"AAEA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,UAAT,QAA6C,cAA7C;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BG;;AACH,OAAO,IAAM,WAAW,GAAG,UACzB,eADyB,EAC2D;AAEpF,MAAM,SAAS,GAAG,UAAU,CAAC,eAAD,CAA5B;AAEA,SAAO,UAAC,KAAD,EAAgB,OAAhB,EAA0C;AAC/C,QAAM,OAAO,GAAG,SAAS,CAAC,OAAD,CAAzB;AAEA,IAAA,YAAY,CAAC,KAAD,EAAQ,OAAR,CAAZ;AACD,GAJD;AAKD,CAVM","sourcesContent":["import { IStyle } from '@uifabric/merge-styles';\nimport { Theme } from '@fluentui/theme';\nimport { applyClasses } from './applyClasses';\nimport { makeStyles, UseStylesOptions } from './makeStyles';\n\n/**\n * The `makeClasses` helper encapsulates `makeStyles`, and given a style map which follows\n * a specific naming convention, produces a hook function which takes in the component\n * draft state and auto distributes classes into the draft state. This removes a lot of\n * boilerplate code using `classnames` helpers to manage distributing classnames manually.\n *\n * Usage:\n *\n * ```tsx\n * const useButtonClasses makeClasses(theme => {\n *   root: { ... },\n *   _primary: { ... },\n *   _size_small: { ... }\n * });\n * ```\n *\n * The class naming convention is broken down as follows:\n *\n * * No underscores - a slot class name. (E.g. \"root\", \"icon\", etc)\n * * Prefixed with underscore - a modifier. (E.g. \"_primary\", \"_fluid\")\n * * Contains 2 underscores - a name/value matcher. (E.g. \"_size_small\")\n *\n * Modifier classnames are added to the root className when the state contains a truthy value\n * of the same name. For example, when the primary flag is present, the \"_primary\" modifier\n * class will be appended to the root className prop.\n *\n * Enum classnames are also added to the root className when teh state contains an enum value\n * which matches the value in the className. for example, when the `size` enum value is `small`,\n * the \"_size_small\" enum class will be appended to the root className prop.\n */\nexport const makeClasses = <TState extends {}>(\n  styleOrFunction: Record<string, IStyle> | ((theme: Theme) => Record<string, IStyle>),\n) => {\n  const useStyles = makeStyles(styleOrFunction);\n\n  return (state: TState, options?: UseStylesOptions) => {\n    const classes = useStyles(options);\n\n    applyClasses(state, classes);\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}