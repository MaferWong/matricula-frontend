{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@uifabric/utilities';\n/**\r\n * Helper which deep clones props, but respectively assigns JSX, object refs, and class names\r\n * appropriately.\r\n *\r\n * @param target - the target object to merge onto.\r\n * @param propSets - one or more prop sets to deep merge onto the target.\r\n */\n\nexport var makeMergeProps = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var deepMerge = __spreadArrays(options.deepMerge || [], ['style']);\n\n  var mergeProps = function (target) {\n    var propSets = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      propSets[_i - 1] = arguments[_i];\n    }\n\n    for (var _a = 0, propSets_1 = propSets; _a < propSets_1.length; _a++) {\n      var props = propSets_1[_a];\n\n      if (props) {\n        for (var _b = 0, _c = Object.keys(props); _b < _c.length; _b++) {\n          var propName = _c[_b];\n          var propValue = props[propName];\n          var propValueType = typeof propValue;\n\n          if (propValue !== undefined) {\n            if (propValue && propValueType === 'object') {\n              if (Array.isArray(propValue)) {\n                // for arrays, replace.\n                target[propName] = propValue;\n              } else {\n                target[propName] = target[propName] || {};\n\n                if (typeof target[propName] !== 'object' || React.isValidElement(propValue) || propValue && typeof propValue === 'object' && propValue.hasOwnProperty('current') || deepMerge.indexOf(propName) === -1) {\n                  // if target is not an object, or value is JSX,  or a ref object, replace\n                  target[propName] = propValue;\n                } else {\n                  // else deep merge.\n                  mergeProps(target[propName], propValue);\n                }\n              }\n            } else if (propName === 'className') {\n              if (propValue) {\n                // for classnames, append\n                target[propName] = css(target[propName], propValue);\n              }\n            } else {\n              target[propName] = propValue;\n            }\n          }\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return mergeProps;\n};","map":{"version":3,"sources":["next/makeMergeProps.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,qBAApB;AAWA;;;;;;AAMG;;AACH,OAAO,IAAM,cAAc,GAAG,UAA6B,OAA7B,EAA4D;AAA/B,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAA+B;;AACxF,MAAM,SAAS,GAAA,cAAA,CAAQ,OAAO,CAAC,SAAR,IAAqB,EAA7B,EAAgC,CAAE,OAAF,CAAhC,CAAf;;AAEA,MAAM,UAAU,GAAG,UAAC,MAAD,EAA0B;AAAE,QAAA,QAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAA8C;AAA9C,MAAA,QAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC7C,SAAoB,IAAA,EAAA,GAAA,CAAA,EAAA,UAAA,GAAA,QAApB,EAAoB,EAAA,GAAA,UAAA,CAAA,MAApB,EAAoB,EAAA,EAApB,EAA8B;AAAzB,UAAM,KAAK,GAAA,UAAA,CAAA,EAAA,CAAX;;AACH,UAAI,KAAJ,EAAW;AACT,aAAuB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAvB,EAAuB,EAAA,GAAA,EAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAA2C;AAAtC,cAAM,QAAQ,GAAA,EAAA,CAAA,EAAA,CAAd;AACH,cAAM,SAAS,GAAG,KAAK,CAAC,QAAD,CAAvB;AACA,cAAM,aAAa,GAAG,OAAO,SAA7B;;AAEA,cAAI,SAAS,KAAK,SAAlB,EAA6B;AAC3B,gBAAI,SAAS,IAAI,aAAa,KAAK,QAAnC,EAA6C;AAC3C,kBAAI,KAAK,CAAC,OAAN,CAAc,SAAd,CAAJ,EAA8B;AAC5B;AACA,gBAAA,MAAM,CAAC,QAAD,CAAN,GAAmB,SAAnB;AACD,eAHD,MAGO;AACL,gBAAA,MAAM,CAAC,QAAD,CAAN,GAAmB,MAAM,CAAC,QAAD,CAAN,IAAoB,EAAvC;;AAEA,oBACE,OAAO,MAAM,CAAC,QAAD,CAAb,KAA4B,QAA5B,IACA,KAAK,CAAC,cAAN,CAAqB,SAArB,CADA,IAEC,SAAS,IAAI,OAAO,SAAP,KAAqB,QAAlC,IAA8C,SAAS,CAAC,cAAV,CAAyB,SAAzB,CAF/C,IAGA,SAAS,CAAC,OAAV,CAAkB,QAAlB,MAAgC,CAAC,CAJnC,EAKE;AACA;AACA,kBAAA,MAAM,CAAC,QAAD,CAAN,GAAmB,SAAnB;AACD,iBARD,MAQO;AACL;AACA,kBAAA,UAAU,CAAC,MAAM,CAAC,QAAD,CAAP,EAAmB,SAAnB,CAAV;AACD;AACF;AACF,aApBD,MAoBO,IAAI,QAAQ,KAAK,WAAjB,EAA8B;AACnC,kBAAI,SAAJ,EAAe;AACb;AACA,gBAAA,MAAM,CAAC,QAAD,CAAN,GAAmB,GAAG,CAAC,MAAM,CAAC,QAAD,CAAP,EAAmB,SAAnB,CAAtB;AACD;AACF,aALM,MAKA;AACL,cAAA,MAAM,CAAC,QAAD,CAAN,GAAmB,SAAnB;AACD;AACF;AACF;AACF;AACF;;AACD,WAAO,MAAP;AACD,GAzCD;;AA2CA,SAAO,UAAP;AACD,CA/CM","sourcesContent":["import * as React from 'react';\nimport { css } from '@uifabric/utilities';\nimport { GenericDictionary } from './types';\n\nexport type MergePropsOptions = {\n  /**\n   * A list of props to deep merge. By default, `style` will\n   * always be deep merged so it's not required to be provided.\n   */\n  deepMerge?: string[];\n};\n\n/**\n * Helper which deep clones props, but respectively assigns JSX, object refs, and class names\n * appropriately.\n *\n * @param target - the target object to merge onto.\n * @param propSets - one or more prop sets to deep merge onto the target.\n */\nexport const makeMergeProps = <TState = GenericDictionary>(options: MergePropsOptions = {}) => {\n  const deepMerge = [...(options.deepMerge || []), 'style'];\n\n  const mergeProps = (target: GenericDictionary, ...propSets: (GenericDictionary | undefined)[]): TState => {\n    for (const props of propSets) {\n      if (props) {\n        for (const propName of Object.keys(props)) {\n          const propValue = props[propName];\n          const propValueType = typeof propValue;\n\n          if (propValue !== undefined) {\n            if (propValue && propValueType === 'object') {\n              if (Array.isArray(propValue)) {\n                // for arrays, replace.\n                target[propName] = propValue;\n              } else {\n                target[propName] = target[propName] || {};\n\n                if (\n                  typeof target[propName] !== 'object' ||\n                  React.isValidElement(propValue) ||\n                  (propValue && typeof propValue === 'object' && propValue.hasOwnProperty('current')) ||\n                  deepMerge.indexOf(propName) === -1\n                ) {\n                  // if target is not an object, or value is JSX,  or a ref object, replace\n                  target[propName] = propValue;\n                } else {\n                  // else deep merge.\n                  mergeProps(target[propName], propValue);\n                }\n              }\n            } else if (propName === 'className') {\n              if (propValue) {\n                // for classnames, append\n                target[propName] = css(target[propName], propValue);\n              }\n            } else {\n              target[propName] = propValue;\n            }\n          }\n        }\n      }\n    }\n    return target as TState;\n  };\n\n  return mergeProps;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}